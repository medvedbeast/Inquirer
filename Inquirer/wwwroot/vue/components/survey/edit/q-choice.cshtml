@if (Model.Section == "template")
{
    <div class="options">
        <div class="input option" v-for="option in options">
            <label>Варіант відповіді</label>
            <input class="shadowed" type="text" v-model="option.label" v-validate="'required'"
                   :name="`question[${ $parent.key }].option[${ option.key }].label`" />
            <div class="filename" v-if="option.image.filename.length > 0" :title="option.image.filename">
                Зображення: <u v-on:click="OnEnlargeImageClicked(option.index)">{{ option.image.filename }}</u>
            </div>
            <div class="icon" title="Видалити зображення" v-if="option.image.filename.length > 0" v-on:click="OnDeleteOptionImageClicked(option.index)">
                highlight_off
            </div>
            <input type="file" accept="image/*" :id="`question[${ $parent.key }].option[${ option.key }].image`" v-on:change="OnOptionImageChanged(option.index)" />
            <div class="icon" title="Додати фото" v-if="option.image.filename.length == 0" v-on:click="OnAddOptionImageClicked(option.index)">
                camera_alt
            </div>
            <div class="icon" title="Видалити" v-on:click="OnDeleteOptionClicked(option.index)">
                delete
            </div>
            <span v-show="errors.has(`question[${ $parent.key }].option[${ option.key }].label`)" class="error">
                {{ errors.first(`question[${ $parent.key }].option[${ option.key }].label`) }}
            </span>
        </div>
        <div class="input other" v-if="other.isShown === true">
            <label>Варіант "Інше"</label>
            <input class="shadowed" type="text" v-model="other.label" v-validate="'required'"
                   :name="`question[${ $parent.key }].other.label`" />
            <div class="icon" title="Видалити" v-on:click="other.isShown = false">delete</div>
            <span v-show="errors.has(`question[${ $parent.key }].other.label`)" class="error">
                {{ errors.first(`question[${ $parent.key }].other.label`) }}
            </span>
        </div>
    </div>
}
else
{
    <script id="q-choice-script" type="text/javascript">
        Vue.component("q-choice", {
            template: "#q-choice-template",
            props: ["element"],
            inject: ["$validator"],
            data: () => {
                return {
                    counter: 0,
                    options: [],
                    other: {
                        isShown: false,
                        label: ""
                    },
                    buttons: []
                };
            },
            created: function () {
                if (this.element.data) {
                    if (this.element.data.options.length > 0) {
                        for (var i = 0; i < this.element.data.options.length; i++) {
                            var e = this.element.data.options[i];
                            if (!e.isCustom) {
                                this.options.push(new Choice(this.options, this.counter++, e.label, e.value, { data: e.image, filename: e.image ? "зображення.png" : "" }, false));
                            } else {
                                this.other = { isShown: true, label: e.label };
                            }
                        }
                    }
                } else {
                    this.options.push(new Choice(this.options, this.counter++, "Перша опція", null));
                    this.options.push(new Choice(this.options, this.counter++, "Друга опція", null));
                }
                var self = this;
                this.buttons = [
                    {
                        label: "Варіант відповіді",
                        callback: this.OnAddOptionClicked
                    },
                    {
                        icon: "title",
                        label: "Варіант 'Інше'",
                        condition: function () {
                            return !self.other.isShown;
                        },
                        callback: function () {
                            self.other.isShown = true;
                        }
                    },
                ];
            },
            computed: {
                result: function () {
                    var r = [];
                    for (var i = 0; i < this.options.length; i++) {
                        r.push({
                            label: this.options[i].label,
                            value: null,
                            image: this.options[i].image.data,
                            isCustom: false
                        });
                    }
                    if (this.other.isShown === true) {
                        r.push({
                            label: this.other.label,
                            value: null,
                            image: null,
                            isCustom: true
                        });
                    }
                    return r;
                }
            },
            methods: {
                OnAddOptionClicked: function () {
                    this.options.push(new Choice(this.options, this.counter++, null, ""));
                },
                OnDeleteOptionClicked: function (i) {
                    this.options.splice(i, 1);
                },
                OnAddOptionImageClicked: function (i) {
                    var o = this.options[i];
                    $(`#question\\[${this.$parent.index}\\]\\.option\\[${o.key}\\]\\.image`).click();
                },
                OnDeleteOptionImageClicked: function (i) {
                    var o = this.options[i];
                    o.image.data = "";
                    o.image.filename = "";
                    $(`#question\\[${this.$parent.index}\\]\\.option\\[${o.key}\\]\\.image`).val("");
                },
                OnOptionImageChanged: async function (i) {
                    var o = this.options[i];
                    var input = $(`#question\\[${this.$parent.index}\\]\\.option\\[${o.key}\\]\\.image`)[0];
                    if (input.files.length > 0) {
                        o.image.filename = input.files[0].name;
                        var reader = new ImageInputReader(`question\\[${this.$parent.index}\\]\\.option\\[${o.key}\\]\\.image`, true, 1920, 1080);
                        o.image.data = await reader.Run(true);
                    }
                },
                OnEnlargeImageClicked: function (i) {
                    events.$emit("ImageEnlarged", this.options[i].image.data);
                }
            }
        });
    </script>
}

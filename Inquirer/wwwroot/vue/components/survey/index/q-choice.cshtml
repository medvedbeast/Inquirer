@if (Model.Section == "template")
{
    <div class="options">
        <div class="input" v-for="option in options">
            <input type="radio" v-model="answer" :value="option.id"
                   :name="`question[${ $parent.key }].option[${ option.key }]`"
                   :id="`question[${ $parent.key }].option[${ option.key }]`" />
            <label :for="`question[${ $parent.key }].option[${ option.key }]`">{{ option.label }}</label>
        </div>
        <div v-if="other != null" class="input">
            <input type="radio" v-model="answer" :value="other.id"
                   :name="`question[${ $parent.key }].other`"
                   :id="`question[${ $parent.key }].other`" />
            <label :for="`question[${ $parent.key }].other`">{{ other.label }}</label>
            <input type="text" class="shadowed" v-if="answer == other.id"
                   v-model="other.answer" v-validate="'required'"
                   :name="`question[${ $parent.key }].other.answer`" />
            <span v-show="errors.has(`question[${ $parent.key }].other.answer`) && answer == other.id" class="error">
                {{ errors.first(`question[${ $parent.key }].other.answer`) }}
            </span>
        </div>
        <input type="hidden" :name="`question[${ $parent.key }]`" v-model="answer" v-validate="$parent.isRequired == true ? 'question_required|required' : ''" />
    </div>
}
else
{
    <script id="q-choice-script" type="text/javascript">
        Vue.component("q-choice", {
            template: "#q-choice-template",
            props: ["element"],
            inject: ["$validator"],
            data: () => {
                return {
                    options: [],
                    other: null,
                    answer: null
                };
            },
            created: function () {
                if (this.element) {
                    for (var i = 0; i < this.element.options.length; i++) {
                        var o = this.element.options[i];
                        if (o.isCustom != true) {
                            this.options.push(new Choice(
                                i,
                                o.id,
                                o.label,
                                o.value,
                                o.image
                            ));
                        } else {
                            this.other = {
                                id: o.id,
                                label: o.label,
                                answer: ""
                            }
                        }
                    }
                }
            },
            computed: {
                result: function () {
                    var result = [];

                    if (this.answer == this.other.id) {
                        result.push(new Answer(
                            null,
                            this.other.answer,
                            this.other.id,
                            this.$parent.id,
                            application.user.id
                        ));
                    } else if (this.answer != null) {
                        result.push(new Answer(
                            null,
                            null,
                            this.answer,
                            this.element.id,
                            application.user.id
                        ));
                    }

                    return result;
                }
            }
        });
    </script>
}

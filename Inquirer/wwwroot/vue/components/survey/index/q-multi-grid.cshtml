@if (Model.Section == "template")
{
    <div class="options">
        <table cellpadding="0" cellspacing="0">
            <thead>
                <tr>
                    <td></td>
                    <td v-for="column in columns" class="center">
                        {{ column.value }}
                    </td>
                </tr>
            </thead>
            <tbody>
                <tr v-for="(r, row) in rows">
                    <td>{{ r.label }}</td>
                    <td v-for="(c, column) in columns" class="center" v-on:click="OnCellClicked(row, column, $event)">
                        <input type="checkbox" v-model="answers[row]" :value="c.id"
                               :name="`question[${ $parent.key }].option[${ row }].choice[${ column }]`"
                               :id="`question[${ $parent.key }].option[${ row }].choice[${ column }]`" />
                    </td>
                </tr>
            </tbody>
        </table>
        <input type="hidden" :name="`question[${ $parent.key }]`" v-model="answers" v-validate="$parent.isRequired == true ? 'question_required|required' : ''" />
    </div>
}
else
{
    <script id="q-multi-grid-script" type="text/javascript">
        Vue.component("q-multi-grid", {
            template: "#q-multi-grid-template",
            props: ["element"],
            inject: ["$validator"],
            data: () => {
                return {
                    rows: [],
                    columns: [],
                    answers: []
                };
            },
            created: function () {
                if (this.element) {
                    for (var i = 0; i < this.element.options.length; i++) {
                        var o = this.element.options[i];
                        if (o.label != null) {
                            this.rows.push(new Choice(
                                i,
                                o.id,
                                o.label,
                                null,
                                null
                            ));
                            this.answers[i] = [];
                        } else {
                            this.columns.push(new Choice(
                                i,
                                o.id,
                                null,
                                o.value,
                                null
                            ));
                        }
                    }
                }
            },
            computed: {
                result: function () {
                    var result = [];

                    for (var i = 0; i < this.answers.length; i++) {
                        if (this.answers[i]) {
                            for (var j = 0; j < this.answers[i].length; j++) {
                                if (this.answers[i][j]) {
                                    result.push(new Answer(
                                        null,
                                        this.answers[i][j],
                                        this.rows[i].id,
                                        this.element.id,
                                        application.user.id
                                    ));
                                }
                            }
                        }
                    }

                    return result;
                }
            },
            methods: {
                OnCellClicked: function (row, column, event) {
                    if (!$(event.target).is("input")) {
                        $(`#question\\[${this.$parent.key}\\]\\.option\\[${row}\\]\\.choice\\[${column}\\]`).click();
                    }
                }
            }
        });
    </script>
}
